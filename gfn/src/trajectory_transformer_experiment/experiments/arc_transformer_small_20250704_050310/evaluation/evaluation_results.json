{
  "overall_accuracy": 0.0,
  "total_correct": 0,
  "total_tests": 21,
  "problem_results": [
    {
      "problem_id": 86,
      "test_results": [
        {
          "test_idx": 0,
          "predicted_actions": [],
          "predicted_grid": [
            [
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              0,
              8,
              8
            ],
            [
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              0,
              8
            ],
            [
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              0,
              0
            ],
            [
              8,
              8,
              8,
              8,
              0,
              8,
              8,
              8,
              8,
              0,
              8
            ],
            [
              8,
              8,
              8,
              8,
              8,
              0,
              8,
              0,
              0,
              0,
              0
            ],
            [
              8,
              8,
              8,
              8,
              8,
              0,
              8,
              0,
              0,
              0,
              8
            ],
            [
              8,
              8,
              8,
              8,
              8,
              0,
              8,
              0,
              0,
              8,
              8
            ],
            [
              8,
              8,
              8,
              8,
              0,
              8,
              0,
              0,
              0,
              8,
              8
            ],
            [
              8,
              8,
              8,
              0,
              8,
              0,
              0,
              0,
              0,
              0,
              0
            ]
          ],
          "expected_grid": [
            [
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              8
            ],
            [
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              0,
              8,
              8
            ],
            [
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              0,
              8
            ],
            [
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              8,
              0,
              0
            ],
            [
              8,
              8,
              8,
              8,
              0,
              8,
              8,
              8,
              8,
              0,
              8
            ],
            [
              8,
              8,
              8,
              8,
              8,
              0,
              8,
              0,
              0,
              0,
              0
            ],
            [
              8,
              8,
              8,
              8,
              8,
              0,
              8,
              0,
              0,
              0,
              8
            ],
            [
              8,
              8,
              8,
              8,
              8,
              0,
              8,
              0,
              0,
              8,
              8
            ],
            [
              8,
              8,
              8,
              8,
              0,
              8,
              0,
              0,
              0,
              8,
              8
            ]
          ],
          "is_correct": false,
          "confidence": 0.15997423529624938,
          "num_actions": 0
        },
        {
          "test_idx": 1,
          "error": "The size of tensor a (128) must match the size of tensor b (233) at non-singleton dimension 3",
          "is_correct": false,
          "confidence": 0.0
        },
        {
          "test_idx": 2,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        }
      ],
      "accuracy": 0.0,
      "correct_count": 0,
      "total_count": 3
    },
    {
      "problem_id": 139,
      "test_results": [
        {
          "test_idx": 0,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        },
        {
          "test_idx": 1,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        },
        {
          "test_idx": 2,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        }
      ],
      "accuracy": 0.0,
      "correct_count": 0,
      "total_count": 3
    },
    {
      "problem_id": 178,
      "test_results": [
        {
          "test_idx": 0,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        },
        {
          "test_idx": 1,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        },
        {
          "test_idx": 2,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        }
      ],
      "accuracy": 0.0,
      "correct_count": 0,
      "total_count": 3
    },
    {
      "problem_id": 149,
      "test_results": [
        {
          "test_idx": 0,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        },
        {
          "test_idx": 1,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        },
        {
          "test_idx": 2,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        }
      ],
      "accuracy": 0.0,
      "correct_count": 0,
      "total_count": 3
    },
    {
      "problem_id": 154,
      "test_results": [
        {
          "test_idx": 0,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        },
        {
          "test_idx": 1,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        },
        {
          "test_idx": 2,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        }
      ],
      "accuracy": 0.0,
      "correct_count": 0,
      "total_count": 3
    },
    {
      "problem_id": 240,
      "test_results": [
        {
          "test_idx": 0,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        },
        {
          "test_idx": 1,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        },
        {
          "test_idx": 2,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        }
      ],
      "accuracy": 0.0,
      "correct_count": 0,
      "total_count": 3
    },
    {
      "problem_id": 379,
      "test_results": [
        {
          "test_idx": 0,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        },
        {
          "test_idx": 1,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        },
        {
          "test_idx": 2,
          "error": "CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.\nFor debugging consider passing CUDA_LAUNCH_BLOCKING=1\nCompile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n",
          "is_correct": false,
          "confidence": 0.0
        }
      ],
      "accuracy": 0.0,
      "correct_count": 0,
      "total_count": 3
    }
  ],
  "model_config": {
    "temperature": 1.0,
    "top_k": null,
    "top_p": 0.9,
    "max_new_tokens": 16,
    "num_return_sequences": 1,
    "horizon": 20,
    "beam_width": 64,
    "n_samples": 1,
    "eval_problems": [
      86,
      139,
      178,
      149,
      154,
      240,
      379
    ],
    "max_test_samples": 50,
    "rearc_data_dir": "../LLM_experiment/data/re-arc/re_arc_extracted/re_arc/tasks",
    "model_load_path": "./models/arc_transformer_best.pt",
    "results_dir": "./experiments/arc_transformer_small_20250704_050310/evaluation",
    "max_actions": 10,
    "device": "cuda"
  },
  "evaluation_problems": [
    86,
    139,
    178,
    149,
    154,
    240,
    379
  ]
}